#!/bin/bash
cd monitoring/prometheus


echo "Creating prometheus file"

rm -r prometheus.yml

# Build the yaml file
YAML_FILE="prometheus.yml"
echo "Creating config file $YAML_FILE"

# Build the deployment file
FILE_CONTENT=$(cat <<EOF''
global:
  scrape_interval:     15s

  external_labels:
    monitor: 'game-service-monitor'

scrape_configs:
- job_name: 'game-service'
  scrape_interval: 5s
  metrics_path: '/metrics/'
  static_configs:
  - targets: ['173.193.82.62:32131']
  scheme: http
  tls_config:
    insecure_skip_verify: true
- job_name: 'player-service'
  scrape_interval: 5s
  metrics_path: '/metrics/'
  static_configs:
  - targets: ['173.193.82.62:30554']
  scheme: http
  tls_config:
    insecure_skip_verify: true
- job_name: 'auth-service'
  scrape_interval: 5s
  metrics_path: '/metrics/'
  static_configs:
  - targets: ['173.193.82.62:30082']
  scheme: http
  tls_config:
    insecure_skip_verify: true
- job_name: 'frontend'
  scrape_interval: 5s
  metrics_path: '/metrics/'
  static_configs:
  - targets: ['173.193.82.62:30935']
  scheme: http
  tls_config:
    insecure_skip_verify: true


EOF
)


echo "$FILE_CONTENT" > $YAML_FILE

cat prometheus.yml 


echo -e "FROM prom/prometheus:v2.4.0\nADD prometheus.yml /etc/prometheus\nEXPOSE 9090" > Dockerfile

cat Dockerfile

echo "REGISTRY_URL=${REGISTRY_URL}"
      echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
      echo "IMAGE_NAME=${IMAGE_NAME}"
      echo "ARCHIVE_DIR=${ARCHIVE_DIR}"
      echo "DOCKER_ROOT=${DOCKER_ROOT}"
      echo "DOCKER_FILE=${DOCKER_FILE}"
      # View build properties
      if [ -f build.properties ]; then 
        echo "build.properties:"
        cat build.properties
      else 
        echo "build.properties : not found"
      fi 
      # also run 'env' command to find all available env variables
      # or learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment
      echo "=========================================================="
      echo "Checking for Dockerfile at the repository root"
      if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
      if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=Dockerfile ; fi
      if [ -f ${DOCKER_ROOT}/${DOCKER_FILE} ]; then 
        echo -e "Dockerfile found at: ${DOCKER_FILE}"
      else
        echo "Dockerfile not found at: ${DOCKER_FILE}"
        exit 1
      fi
      echo "Linting Dockerfile"
      npm install -g dockerlint
      dockerlint -f ${DOCKER_ROOT}/${DOCKER_FILE}
      echo "=========================================================="
      echo "Checking registry current plan and quota"
      bx cr plan
      bx cr quota
      echo "If needed, discard older images using: bx cr image-rm"
      echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
      NS=$( bx cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
      if [ -z "${NS}" ]; then
        echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
        bx cr namespace-add ${REGISTRY_NAMESPACE}
        echo "Registry namespace ${REGISTRY_NAMESPACE} created."
      else 
        echo "Registry namespace ${REGISTRY_NAMESPACE} found."
      fi
      echo -e "Existing images in registry"
      bx cr images --restrict ${REGISTRY_NAMESPACE}


      IMAGE_TAG=${TIMESTAMP}
      if [ ! -z "${GIT_COMMIT}" ]; then
        GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
        IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
      fi
      if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
      IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
      echo "=========================================================="
      echo -e "BUILDING CONTAINER IMAGE: ${IMAGE_NAME}:${IMAGE_TAG}"
      if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
      if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=${DOCKER_ROOT}/Dockerfile ; fi
      set -x
      bx cr build -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_ROOT} -f ${DOCKER_FILE}
      set +x
      bx cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
      # Set PIPELINE_IMAGE_URL for subsequent jobs in stage (e.g. Vulnerability Advisor)
      export PIPELINE_IMAGE_URL="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
      echo "=========================================================="
      KEEP=1
      echo -e "PURGING REGISTRY, only keeping last ${KEEP} image(s) based on image digests"
      COUNT=0
      LIST=$( bx cr images --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME} --no-trunc --format '__not_implemented__ __not_implemented__@__not_implemented__' | sort -r -u | awk '{print $2}' | sed '$ d' )
      while read -r IMAGE_URL ; do
        if [[ "$COUNT" -lt "$KEEP" ]]; then
          echo "Keeping image digest: ${IMAGE_URL}"
        else
          bx cr image-rm "${IMAGE_URL}"
        fi
        COUNT=$((COUNT+1)) 
      done <<< "$LIST"
      if [[ "$COUNT" -gt 1 ]]; then
        echo "Content of image registry"
        bx cr images
      fi  
