---
defaultBaseImageVersion: 'latest'
stages: 
- name: Build
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build liberty-bikes-grafana
    type: builder
    build_type: cr
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: liberty-bikes-prometheus
    script: |
      #!/bin/bash
      cd monitoring

      echo "Creating config.ini file"

      # Build the yaml file
      CONFIG_FILE="config.ini"
      echo "Creating config file $CONFIG_FILE"

      touch $CONFIG_FILE
      # Build the deployment file
      FILE_CONTENT=$(cat <<EOF''
      [paths]
      provisioning = /etc/grafana/provisioning

      [server]
      enable_gzip = true

      [users]
      default_theme = dark

      EOF
      )

      echo "$FILE_CONTENT" > $CONFIG_FILE

      # Build the yaml file
      YAML_FILE="datasource.yml"
      echo "Creating config file $YAML_FILE"

      # Build the deployment file
      FILE_CONTENT=$(cat <<EOF''

      # config file version
      apiVersion: 1

      # list of datasources that should be deleted from the database
      deleteDatasources:
        - name: Prometheus
          orgId: 1

      # list of datasources to insert/update depending
      # whats available in the database
      datasources:
        # <string, required> name of the datasource. Required
        - name: Prometheus
          # <string, required> datasource type. Required
          type: prometheus
          # <string, required> access mode. direct or proxy. Required
          access: direct
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          # <string> url
          url: http://169.60.26.222:30300
          # <string> database password, if used
          password:
          # <string> database user, if used
          user:
          # <string> database name, if used
          database:
          # <bool> enable/disable basic auth
          basicAuth: false
          # <string> basic auth username
          basicAuthUser: admin
          # <string> basic auth password
          basicAuthPassword: admin
          # <bool> enable/disable with credentials headers
          withCredentials:
          # <bool> mark as default datasource. Max one per org
          isDefault: true
          # <map> fields that will be converted to json and stored in json_data
          jsonData:
            graphiteVersion: "1.1"
            tlsAuth: false
            tlsAuthWithCACert: false
          # <string> json object of data that will be encrypted.
          secureJsonData:
            tlsCACert: "..."
            tlsClientCert: "..."
            tlsClientKey: "..."
          version: 1
          # <bool> allow users to edit datasources from the UI.
          editable: true

      EOF
      )


      echo "$FILE_CONTENT" > $YAML_FILE

      # Build the Docker file

      echo -e "FROM grafana/grafana:5.2.4\nENV GF_INSTALL_PLUGINS flant-statusmap-panel\nADD dashboardList/dashboardList.yml /etc/grafana/provisioning/dashboards/\nADD config.ini /etc/grafana/\nADD datasource.yml /etc/grafana/provisioning/datasources/\nADD grafanaDashboardConfig/grafanaDashboardConfig.json /var/lib/grafana/dashboards/\nEXPOSE 3000" > Dockerfile


      echo "REGISTRY_URL=${REGISTRY_URL}"
            echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
            echo "IMAGE_NAME=${IMAGE_NAME}"
            echo "ARCHIVE_DIR=${ARCHIVE_DIR}"
            echo "DOCKER_ROOT=${DOCKER_ROOT}"
            echo "DOCKER_FILE=${DOCKER_FILE}"
            # View build properties
            if [ -f build.properties ]; then 
              echo "build.properties:"
              cat build.properties
            else 
              echo "build.properties : not found"
            fi 
            # also run 'env' command to find all available env variables
            # or learn more about the available environment variables at:
            # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment
            echo "=========================================================="
            echo "Checking for Dockerfile at the repository root"
            if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
            if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=Dockerfile ; fi
            if [ -f ${DOCKER_ROOT}/${DOCKER_FILE} ]; then 
              echo -e "Dockerfile found at: ${DOCKER_FILE}"
            else
              echo "Dockerfile not found at: ${DOCKER_FILE}"
              exit 1
            fi
            echo "Linting Dockerfile"
            npm install -g dockerlint
            dockerlint -f ${DOCKER_ROOT}/${DOCKER_FILE}
            echo "=========================================================="
            echo "Checking registry current plan and quota"
            bx cr plan
            bx cr quota
            echo "If needed, discard older images using: bx cr image-rm"
            echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
            NS=$( bx cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
            if [ -z "${NS}" ]; then
              echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
              bx cr namespace-add ${REGISTRY_NAMESPACE}
              echo "Registry namespace ${REGISTRY_NAMESPACE} created."
            else 
              echo "Registry namespace ${REGISTRY_NAMESPACE} found."
            fi
            echo -e "Existing images in registry"
            bx cr images --restrict ${REGISTRY_NAMESPACE}


            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
            echo "=========================================================="
            echo -e "BUILDING CONTAINER IMAGE: ${IMAGE_NAME}:${IMAGE_TAG}"
            if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
            if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=${DOCKER_ROOT}/Dockerfile ; fi
            set -x
            bx cr build -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_ROOT} -f ${DOCKER_FILE}
            set +x
            bx cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
            # Set PIPELINE_IMAGE_URL for subsequent jobs in stage (e.g. Vulnerability Advisor)
            export PIPELINE_IMAGE_URL="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
            echo "=========================================================="
            KEEP=1
            echo -e "PURGING REGISTRY, only keeping last ${KEEP} image(s) based on image digests"
            COUNT=0
            LIST=$( bx cr images --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME} --no-trunc --format '__not_implemented__ __not_implemented__@__not_implemented__' | sort -r -u | awk '{print $2}' | sed '$ d' )
            while read -r IMAGE_URL ; do
              if [[ "$COUNT" -lt "$KEEP" ]]; then
                echo "Keeping image digest: ${IMAGE_URL}"
              else
                bx cr image-rm "${IMAGE_URL}"
              fi
              COUNT=$((COUNT+1)) 
            done <<< "$LIST"
            if [[ "$COUNT" -gt 1 ]]; then
              echo "Content of image registry"
              bx cr images
            fi  
- name: Deploy to IBM Cloud
  inputs:
  - type: job
    stage: Build
    job: Build liberty-bikes-grafana
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text     
  jobs:
  - name: Deploy to Kubernetes
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      cd monitoring

      echo "Creating config.ini file"

      # Build the yaml file
      CONFIG_FILE="config.ini"
      echo "Creating config file $CONFIG_FILE"

      touch $CONFIG_FILE
      # Build the deployment file
      FILE_CONTENT=$(cat <<EOF''
      [paths]
      provisioning = /etc/grafana/provisioning

      [server]
      enable_gzip = true

      [users]
      default_theme = dark

      EOF
      )

      echo "$FILE_CONTENT" > $CONFIG_FILE

      # Build the yaml file
      YAML_FILE="datasource.yml"
      echo "Creating config file $YAML_FILE"
      HOST=169.60.26.222
      # Build the deployment file
      FILE_CONTENT=$(cat <<EOF''

      # config file version
      apiVersion: 1

      # list of datasources that should be deleted from the database
      deleteDatasources:
        - name: Prometheus
          orgId: 1

      # list of datasources to insert/update depending
      # whats available in the database
      datasources:
        # <string, required> name of the datasource. Required
        - name: Prometheus
          # <string, required> datasource type. Required
          type: prometheus
          # <string, required> access mode. direct or proxy. Required
          access: direct
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          # <string> url
          url: $HOST:30300
          # <string> database password, if used
          password:
          # <string> database user, if used
          user:
          # <string> database name, if used
          database:
          # <bool> enable/disable basic auth
          basicAuth: false
          # <string> basic auth username
          basicAuthUser: admin
          # <string> basic auth password
          basicAuthPassword: admin
          # <bool> enable/disable with credentials headers
          withCredentials:
          # <bool> mark as default datasource. Max one per org
          isDefault: true
          # <map> fields that will be converted to json and stored in json_data
          jsonData:
            graphiteVersion: "1.1"
            tlsAuth: false
            tlsAuthWithCACert: false
          # <string> json object of data that will be encrypted.
          secureJsonData:
            tlsCACert: "..."
            tlsClientCert: "..."
            tlsClientKey: "..."
          version: 1
          # <bool> allow users to edit datasources from the UI.
          editable: true

      EOF
      )


      echo "$FILE_CONTENT" > $YAML_FILE

      # Build the Docker file

      echo -e "FROM grafana/grafana:5.2.4\nENV GF_INSTALL_PLUGINS flant-statusmap-panel\nADD dashboardList/dashboardList.yml /etc/grafana/provisioning/dashboards/\nADD config.ini /etc/grafana/\nADD datasource.yml /etc/grafana/provisioning/datasources/\nADD grafanaDashboardConfig/grafanaDashboardConfig.json /var/lib/grafana/dashboards/\nEXPOSE 3000" > Dockerfile


      echo "REGISTRY_URL=${REGISTRY_URL}"
            echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
            echo "IMAGE_NAME=${IMAGE_NAME}"
            echo "ARCHIVE_DIR=${ARCHIVE_DIR}"
            echo "DOCKER_ROOT=${DOCKER_ROOT}"
            echo "DOCKER_FILE=${DOCKER_FILE}"
            # View build properties
            if [ -f build.properties ]; then 
              echo "build.properties:"
              cat build.properties
            else 
              echo "build.properties : not found"
            fi 
            # also run 'env' command to find all available env variables
            # or learn more about the available environment variables at:
            # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment
            echo "=========================================================="
            echo "Checking for Dockerfile at the repository root"
            if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
            if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=Dockerfile ; fi
            if [ -f ${DOCKER_ROOT}/${DOCKER_FILE} ]; then 
              echo -e "Dockerfile found at: ${DOCKER_FILE}"
            else
              echo "Dockerfile not found at: ${DOCKER_FILE}"
              exit 1
            fi
            echo "Linting Dockerfile"
            npm install -g dockerlint
            dockerlint -f ${DOCKER_ROOT}/${DOCKER_FILE}
            echo "=========================================================="
            echo "Checking registry current plan and quota"
            bx cr plan
            bx cr quota
            echo "If needed, discard older images using: bx cr image-rm"
            echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
            NS=$( bx cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
            if [ -z "${NS}" ]; then
              echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
              bx cr namespace-add ${REGISTRY_NAMESPACE}
              echo "Registry namespace ${REGISTRY_NAMESPACE} created."
            else 
              echo "Registry namespace ${REGISTRY_NAMESPACE} found."
            fi
            echo -e "Existing images in registry"
            bx cr images --restrict ${REGISTRY_NAMESPACE}


            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
            echo "=========================================================="
            echo -e "BUILDING CONTAINER IMAGE: ${IMAGE_NAME}:${IMAGE_TAG}"
            if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
            if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=${DOCKER_ROOT}/Dockerfile ; fi
            set -x
            bx cr build -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_ROOT} -f ${DOCKER_FILE}
            set +x
            bx cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
            # Set PIPELINE_IMAGE_URL for subsequent jobs in stage (e.g. Vulnerability Advisor)
            export PIPELINE_IMAGE_URL="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
            echo "=========================================================="
            KEEP=1
            echo -e "PURGING REGISTRY, only keeping last ${KEEP} image(s) based on image digests"
            COUNT=0
            LIST=$( bx cr images --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME} --no-trunc --format '__not_implemented__ __not_implemented__@__not_implemented__' | sort -r -u | awk '{print $2}' | sed '$ d' )
            while read -r IMAGE_URL ; do
              if [[ "$COUNT" -lt "$KEEP" ]]; then
                echo "Keeping image digest: ${IMAGE_URL}"
              else
                bx cr image-rm "${IMAGE_URL}"
              fi
              COUNT=$((COUNT+1)) 
            done <<< "$LIST"
            if [[ "$COUNT" -gt 1 ]]; then
              echo "Content of image registry"
              bx cr images
            fi  
